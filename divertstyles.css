@keyframes moveDown {
    0% {
        transform: translateY(-100vh); /* Start from the top of the viewport */
    }
    100% {
        transform: translateY(100vh); /* Move down to the bottom of the viewport */
    }
}
.enemies,
.reactorControls,
.flightControls,
.status {
    border: 1px solid white; /* Add thin white outline */
    padding: 10px; /* Add padding for better spacing */
    box-sizing: border-box; /* Include border in the box size */
}

body {
    display: flex;
    justify-content: space-between;
    padding: 3% 4.5%;
    background-color: black;
    color: white;
    font-family: monospace;
    overflow: hidden;

}



.container {
    position: relative;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    width: 100%;
    height: 100%;
}

.descriptions-attacks {
    width: 25%;
    text-align: left;
}

.descriptions {
    margin-bottom: 100px;
}

.attacks {
    margin-bottom: 30px;
    font-style:italic;
}

.statusReports{
    margin-bottom: 30px;
    font-style:italic;
}

.playarea {
    width: 18%;
    text-align: center;
    display: flex;
    justify-content: center;
    align-items: center;
    position: absolute;
    background-color: black;
    z-index: 1;
    top: 50vh; /* Change top to 50vh (50% of the viewport height) */
    left: 50%;
    transform: translate(-50%, -50%);
}

.status {
    width: 25%;
    display: flex;
    flex-direction: column;
    justify-content: flex-start; /* Align status to the left */
    align-items: flex-start;
    position: absolute;
    top: 10%; /* Adjust the top position */
    left: 0%; /* Adjust the right position */
    z-index: 1;
    background-color:black;


}


.reactorControls {
    width: 15%;
    display: flex;
    flex-direction: column;
    justify-content: flex-start; /* Align controls to the right */
    align-items: flex-start;
    position: absolute;
    top: 200px; /* Adjust the top position */
    left: 0%; /* Adjust the right position */
    z-index: 1;
    background-color:black;
}

#coreTemperature,
#enemyDistance {
    font-size: x-large;
    font-style: bold;
    margin-top: 5px;
}
.flightControls {
    width: 15%;
    display: flex;
    flex-direction: column;
    justify-content: flex-start; /* Align controls to the right */
    align-items: flex-start;
    position: absolute;
    top: 600px; /* Adjust the top position */
    left: 0%; /* Adjust the right position */
    z-index: 1;
    background-color:black;


}

/* Define the height of the status section */
:root {
    --status-height: 200px; /* Adjust the height as needed */
}

/* Add margin between status and controls */
.controls {
    margin-top: 20px;
}


.control-group {
    display: flex;
    justify-content: space-between;
    align-items: center;
}





.enemies {
    width: 25%;
    display: flex;
    flex-direction: column;
    justify-content: flex-end; /* Align controls to the left */
    align-items: flex-end;
    position: absolute;
    top: 10%;
    right: 0%;
    z-index: 1;
    background-color:black;
    overflow: hidden;
    flex-wrap:wrap;
}

.enemy-group {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.enemy-meter {
    /* Your meter styles */
    font-size: small;
    margin-bottom: 5px;
}

.enemy-meter-label {
    /* Your meter styles */
    margin-top: 5px;
    font-size: small;
}

.enemy-meter-title {
    font-size: large;
}

/* ... (existing styles) ... */



.btn,
#level1button,
#level2button {
    font-family: monospace;
    font-size: 14px; /* Adjust the font size */
    font-style: bolder;
    padding: 6px 12px; /* Adjust the padding */
    margin-right: 3px;
    margin-top: 8px;
    background-color: #222; /* Darker background color */
    color: #ccc; /* Lighter text color */
    border: none;
    border-radius: 3px;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
}

.btn:hover, #level1button:hover, #level2button:hover {
    background-color: #444; /* Darker color on hover */
    color: #fff; /* White text color on hover */
}

.highlightedButton{
    background-color: #ff8438;
    color: #000;
}

.meter {
    /* Your meter styles */
    font-size:small;
    margin-bottom: 5px;
}

.meter-label {
    /* Your meter styles */
    margin-top: 10px;
    font-size:small;
}

.meter-title {
    font-size:large;
}


.thrusters {
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    font-family: monospace;
    color: #ff8438;
    bottom: -8px;
}

.fire1, .fire2 {
    animation: fireAnimation 0.09s infinite linear;

}


.thrusters .fire1{
    position: relative;
    left: -55px;
    bottom: 20px;
}
.thrusters .fire2{
    position: relative;
    left: 55px;
    bottom: 20px;
}

@keyframes fireAnimation {
    0% {
        opacity: 1;
        transform: translateY(calc(60px * var(--scale-factor) * 1)) scale(var(--scale-factor)) rotate(0deg);
        color: #ad4200;
    }
    25% {
        opacity: 1;
        transform: translateY(calc(60px * var(--scale-factor) * 1.2)) scale(calc(var(--scale-factor) * 1.05)) rotate(0deg);
        color: #de5500;
    }
    50% {
        opacity: 1;
        transform: translateY(calc(60px * var(--scale-factor) * 1.5)) scale(calc(var(--scale-factor) * 1.1)) rotate(0deg);
        color: #ff6200;
    }
    75% {
        opacity: 1;
        transform: translateY(calc(60px * var(--scale-factor) * 2)) scale(calc(var(--scale-factor) * 1.2)) rotate(0deg);
        color: #ff924e;
    }
    100% {
        opacity: 1;
        transform: translateY(calc(60px * var(--scale-factor) * 2.7)) scale(calc(var(--scale-factor) * 1.1)) rotate(0deg);
        color: #ffd8c0;
    }
}


.shield {
    position: absolute;
    color: rgba(
        calc(255 - var(--shield-power) * 25.5),  /* Red component */
        calc(255 - var(--shield-power) * 25.5),  /* Green component */
        calc(255 + var(--shield-power) * 15),     /* Blue component */
        calc(0.1 + var(--shield-power) * 0.05)
    );
    animation: shieldAnimation 3s infinite linear;
}


@keyframes shieldAnimation {
    0%, 100% {
        opacity: calc(var(--shield-health) * 0.005); /* Initial and final opacity */
    }
    50% {
        opacity: calc(var(--shield-health) * 0.007); /* Higher opacity for flickering effect */
    }
}





#notificationBox1 {
    position: absolute;
    top: 10%;
    left: 50%;
    width: 28%;
    display: flex;
    padding: 10px;
    background-color: rgba(0, 0, 0, 0.8);
    color: white;
    border-radius: 5px;
    flex-direction: column;
    gap: 10px;
    text-align: center;
    transform: translate(-50%); /* Add this line */
    font-size:x-large;
}

#notificationBox2 {
    position: absolute;
    top: calc(5% + var(--status-height));
    padding: 10px;
    color: white;
    border-radius: 5px;
    display: flex;
    flex-direction: column;
    gap: 10px;
    text-align: center;
    width: 21%;
    right: 0%;
    z-index: 1; 
    background-color:black;
    font-size:large;
}

.notification {
    opacity: 0;
    animation: fadeInOut 7s ease-out; /* Adjust the animation duration as needed */
}

@keyframes fadeInOut {
    0%, 100% {
        opacity: 0;
    }
    10%, 90% {
        opacity: 1;
    }
}
@keyframes fadeOut {
    from { opacity: 1; }
    to { opacity: 0; }
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

.ship{
    font-family: monospace;
    white-space: pre-wrap;
    font-weight: bold;
    background-color: black;
    z-index: 1;
}

@keyframes explode {
    0% { transform: scale(1); opacity: 1; color:#ffd8c0 }
    50% { transform: scale(1.5); opacity: 1; color:#fc5522 }
    100% { transform: scale(2); opacity: 0; color:#ad4200}
}

.explode {
    animation: explode 2s forwards;
}


body::before {
    content: "";
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    background-color: #000; /* Set your desired background color */
    overflow: hidden;
}







.stars {
    position: absolute;
    width: 1px;
    height: 1px;
    background-color: #fff; /* Set your desired star color */
    animation: moveDown 10s linear infinite, twinkle 4s infinite alternate; /* Adjust duration values as needed */
    animation-fill-mode: forwards; /* Add this line */
    animation-play-state: running;
}


@keyframes twinkle {
    0% {
        opacity: 1;
    }
    50% {
        opacity: 0.5;
    }
    100% {
        opacity: 1;
    }
}

